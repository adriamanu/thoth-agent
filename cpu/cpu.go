package cpu

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"

	"github.com/adriamanu/thoth-agent/utils"
)

const procStatFilePath string = "/proc/stat"

// We keep the previous read values in this constant
var previousProcStatRead []ProcStat

type ProcStat struct {
	Core           string
	UserTime       int
	NiceTime       int
	SystemTime     int
	IdleTime       int
	UsedPercentage float64
}

// /proc/stat file is generated by kernel and give information about the cpu.
// The first line of this file contains the amount of time that the CPU spent computing various tasks.
// Format of the file : [CPU] | [USER] | [NICE] | [SYSTEM] | [IDLE] | [...]
// Global cpu
// Core 1
// Core 2
// Core ...
func parseProcStatFile(procStatContent string) []ProcStat {
	var err error
	cs := make([]ProcStat, 0)

	for _, line := range strings.Split(procStatContent, "\n") {
		// match single or double space to trim /proc/stat first line
		re := regexp.MustCompile("  | ")
		cpuLine := re.Split(line, -1)

		// Keep only lines with cpu info
		if !strings.Contains(cpuLine[0], "cpu") {
			break
		}

		var currentCore ProcStat
		currentCore.Core = cpuLine[0]

		currentCore.UserTime, err = strconv.Atoi(cpuLine[1])
		if err != nil {
			log.Fatal(err)
		}

		currentCore.NiceTime, err = strconv.Atoi(cpuLine[2])
		if err != nil {
			log.Fatal(err)
		}

		currentCore.SystemTime, err = strconv.Atoi(cpuLine[3])
		if err != nil {
			log.Fatal(err)
		}

		currentCore.IdleTime, err = strconv.Atoi(cpuLine[4])
		if err != nil {
			log.Fatal(err)
		}

		cs = append(cs, currentCore)
	}
	return cs
}

// The CPU usage is measured over an interval of time.
// We read the values from /proc/stat on a fixed interval and calculate the delta from these readings.
func getCoreUsedPercentage(current, previous ProcStat) float64 {
	previousUsage := previous.UserTime + previous.NiceTime + previous.SystemTime + previous.IdleTime
	currentUsage := current.UserTime + current.NiceTime + current.SystemTime + current.IdleTime
	deltaUsage := currentUsage - previousUsage
	deltaIdle := current.IdleTime - previous.IdleTime
	return (1.0 - float64(deltaIdle)/float64(deltaUsage)) * 100.0
}

func Stat() []ProcStat {
	procStatContent, err := utils.ReadFile(procStatFilePath)
	if err != nil {
		log.Fatal(fmt.Sprintf("Cannot open file %s - %v", procStatFilePath), err)
	}

	currentProcStatRead := parseProcStatFile(procStatContent)
	if len(previousProcStatRead) > 0 {
		for i := range currentProcStatRead {
			currentProcStatRead[i].UsedPercentage = getCoreUsedPercentage(currentProcStatRead[i], previousProcStatRead[i])
		}
	}

	previousProcStatRead = currentProcStatRead
	return currentProcStatRead
}
