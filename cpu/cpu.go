package cpu

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"

	utils "github.com/adriamanu/thoth-agent/utils"
)

const procstatFilePath string = "/proc/stat"

// We keep the previous read values in a this constant
var previousProcStatRead cpuTime

type cpuTime struct {
	UserTime   int
	NiceTime   int
	SystemTime int
	IdleTime   int
}

type CPUStat struct {
	UsedPercentage	float64
}

// /proc/stat file is generated by kernel and give informations about the cpu.
// The first line of this file contains the amount of time that the CPU spent computing various tasks.
// Format of the file : [CPU] | [USER] | [NICE] | [SYSTEM] | [IDLE] | [...]
func CPUTime(procstatContent string) cpuTime {
	var ct cpuTime
	var err error

	// match single or double space to trim /proc/stat first line
	re := regexp.MustCompile("  | ")
	cpuLine := re.Split(strings.Split(procstatContent, "\n")[0], -1)

	ct.UserTime, err = strconv.Atoi(cpuLine[1])
	if err != nil {
		log.Fatal(err)
	}

	ct.NiceTime, err = strconv.Atoi(cpuLine[2])
	if err != nil {
		log.Fatal(err)
	}

	ct.SystemTime, err = strconv.Atoi(cpuLine[3])
	if err != nil {
		log.Fatal(err)
	}

	ct.IdleTime, err = strconv.Atoi(cpuLine[4])
	if err != nil {
		log.Fatal(err)
	}

	return ct
}

// The CPU usage is measured over an interval of time.
// We read the values from /proc/stat on a fixed interval and calculate the delta from these readings.
func UsedPercentage(current, previous cpuTime) float64 {
	currentUsage := current.UserTime + current.NiceTime + current.SystemTime + current.IdleTime
	previousUsage := previous.UserTime + previous.NiceTime + previous.SystemTime + previous.IdleTime
	deltaUsage := currentUsage - previousUsage
	deltaIdle := current.IdleTime - previous.IdleTime
	usage := (1.0 - float64(deltaIdle)/float64(deltaUsage)) * 100.0
	return usage
}

func Stat()CPUStat{
	procstatContent, err := utils.ReadFile(procstatFilePath)
	if err != nil {
		log.Fatal(fmt.Sprintf("Cannot open file %s - %v", procstatFilePath), err)
	}
	
	cpu := CPUStat{}
	currentProcStatRead := CPUTime(procstatContent)
	// As we need an interval we omit the first iteration as the global structure will be empty.
	if (cpuTime{}) != previousProcStatRead {
		cpu.UsedPercentage = UsedPercentage(currentProcStatRead, previousProcStatRead)
	}

	previousProcStatRead = currentProcStatRead
	return cpu
}
