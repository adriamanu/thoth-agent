package proc

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	utils "github.com/adriamanu/thoth-agent/utils"
)

const procstatFilePath string = "/proc/stat"

type CPUTime struct {
	UserTime 	int
	NiceTime 	int
	SystemTime	int
	IdleTime		int
}

// /proc/stat file is generated by kernel and give informations about the cpu.
// The first line of this file contains the amount of time that the CPU spent computing various tasks.
// Format of the file : [CPU] | [USER] | [NICE] | [SYSTEM] | [IDLE] | [...]
func getCPUTime(procstatContent string) CPUTime {
	var ct CPUTime
	var err error

	// match single or double space to trim /proc/stat first line
	re := regexp.MustCompile("  | ")
	cpuLine := re.Split(strings.Split(procstatContent, "\n")[0], -1)

	ct.UserTime, err = strconv.Atoi(cpuLine[1])
	if err != nil {
		log.Fatal(err)
	}

	ct.NiceTime, err = strconv.Atoi(cpuLine[2])
	if err != nil {
		log.Fatal(err)
	}

	ct.SystemTime, err = strconv.Atoi(cpuLine[3])
	if err != nil {
		log.Fatal(err)
	}

	ct.IdleTime, err = strconv.Atoi(cpuLine[4])
	if err != nil {
		log.Fatal(err)
	}

	return ct
}

func getCPUUsage(current, previous CPUTime) {
	currentUsage := current.UserTime+current.NiceTime+current.SystemTime
	previousUsage := previous.UserTime+previous.NiceTime+previous.SystemTime
	deltaUsage := currentUsage - previousUsage
	deltaIdle := current.IdleTime - previous.IdleTime
	usage := (1.0 - float64(deltaIdle)/float64(deltaUsage)) * 100.0
	fmt.Println("PERCENT USAGE = ", usage)
}

func ProcStat() {
	var test CPUTime
	for i := 0; i < 10; i++{
		procstatContent,err := utils.ReadFile(procstatFilePath)
		if err != nil {
			log.Fatal(fmt.Sprintf("Cannot open file %s - %v", procstatFilePath), err)
		}
	
		cpuTime := getCPUTime(procstatContent)
		fmt.Println("CPU TIME := ",cpuTime)
		fmt.Println("PREV TIME := ",test)
		if i > 0 {
			getCPUUsage(cpuTime, test)
		}
		test = cpuTime
		time.Sleep(time.Second * 1)
	}
}