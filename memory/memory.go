package memory

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/adriamanu/thoth-agent/utils"
)

const meminfoFilePath string = "/proc/meminfo"

type MemoryStat struct {
	MemTotal          int
	MemAvail          int
	MemFree           int
	MemUsed           int
	MemUsedPercentage float64
	SwapFree          int
	SwapTotal         int
}

func getKbSizeFromLine(line string) int {
	kbSize, err := strconv.Atoi(strings.Split(strings.Trim(line, " "), " ")[0])
	if err != nil {
		log.Fatal(err)
	}

	return kbSize
}

// /proc/meminfo file is generated by kernel and give information about the memory.
// MemTotal:       16321448 kB
// MemFree:         3996188 kB
// MemAvailable:    9822428 kB
// ...
func parseMeminfoFile(meminfoFileContent string) MemoryStat {
	var m MemoryStat
	splittedMemInfo := utils.SplitFilesByLine(meminfoFileContent)

	for i := 0; i < len(splittedMemInfo); i++ {
		line := strings.Split(splittedMemInfo[i], ":")
		switch line[0] {
		case "MemTotal":
			m.MemTotal = getKbSizeFromLine(line[1])
		case "MemFree":
			m.MemFree = getKbSizeFromLine(line[1])
		case "MemAvailable":
			m.MemAvail = getKbSizeFromLine(line[1])
		case "SwapTotal":
			m.SwapTotal = getKbSizeFromLine(line[1])
		case "SwapFree":
			m.SwapFree = getKbSizeFromLine(line[1])
		}
	}

	return m
}

func UsedMemory(available, total int) int {
	return total - available
}

func UsedPercentage(available, total int) float64 {
	return float64(UsedMemory(available, total)) / float64(available) * 100.0
}

func Stat() MemoryStat {
	memInfoFileContent, err := utils.ReadFile(meminfoFilePath)
	if err != nil {
		log.Fatal(fmt.Sprintf("Cannot open file %s - %v", meminfoFilePath, err))
	}

	memStat := parseMeminfoFile(memInfoFileContent)
	memStat.MemUsed = UsedMemory(memStat.MemAvail, memStat.MemTotal)
	memStat.MemUsedPercentage = UsedPercentage(memStat.MemAvail, memStat.MemTotal)
	return memStat
}
